{"version":3,"sources":["App.js","serviceWorker.js","index.js","heartbeat.svg"],"names":["App","state","response","post","responseToPost","name","telephone","email","date","time","callApi","_callee","body","regenerator_default","a","wrap","_context","prev","next","fetch","sent","json","status","Error","message","abrupt","stop","handleSubmit","_callee2","e","_context2","preventDefault","method","headers","Content-Type","JSON","stringify","_this","text","setState","_this2","this","then","res","express","catch","err","console","log","_this3","react_default","createElement","className","src","logo","alt","onSubmit","type","pattern","value","onChange","target","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.891bf8ac.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './heartbeat.svg';\nimport './App.css';\n//import indexPage from './remedic/index.html';\n\nclass App extends Component {\n  state = {\n    response: '',\n    post: '',\n    responseToPost: '',\n    name: '',\n    telephone: '',\n    email: '',\n    date: '',\n    time: ''\n  };\n\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n  }\n\n  callApi = async () => {\n    const response = await fetch('/api/hello');\n    const body = await response.json();\n    if (response.status !== 200) throw Error(body.message);\n    return body;\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch('/api/world', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ \n        post: this.state.post,\n        name : this.state.name,\n        telephone : this.state.telephone,\n        email : this.state.email,\n        date : this.state.date,\n        time : this.state.time\n     }),\n    });\n    const body = await response.text();\n    this.setState({ responseToPost: body });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <header className=\"App-medical-header\">\n            MEDICAL\n          </header>\n        </header>\n        {/* <p>{this.state.response}</p> */}\n        <p>\n          <strong>Insira seus dados para agendar uma consulta:</strong>\n        </p>\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"App-div-inline\">\n            <div className=\"App-div\">\n              <label className=\"App-label\">\n                Nome\n              </label>\n            </div>\n            <div className=\"App-div\">\n              <label className=\"App-label\">\n                Telefone\n              </label>\n            </div>\n            <div className=\"App-div\">\n              <label className=\"App-label\">\n                Email\n              </label>\n            </div>\n            <div className=\"App-div\">\n              <label className=\"App-label\">\n                Data\n              </label>\n            </div>\n            <div className=\"App-div\">\n              <label className=\"App-label\">\n                Hor√°rio\n              </label>\n            </div>\n          </div>\n          <div className=\"App-div-inline\">\n            <div className=\"App-div\">\n              <input\n                className = \"App-input\"\n                type=\"text\"\n                pattern=\"[a-zA-Z]+\"\n                value={this.state.name}\n                onChange={e => this.setState({ name: e.target.value })}\n              />\n            </div>\n            <div className=\"App-div\">\n              <input \n                className = \"App-input\"\n                type=\"number\"\n                pattern=\"[0-9]+\"\n                value={this.state.telephone}\n                onChange={e => this.setState({ telephone: e.target.value })}\n              />\n            </div>\n            <div className=\"App-div\">\n              <input\n                className = \"App-input\"\n                type=\"text\"\n                value={this.state.email}\n                onChange={e => this.setState({ email: e.target.value })}\n              />\n            </div>\n            <div className=\"App-div\">\n              <input\n                className = \"App-input\"\n                type=\"date\"\n                value={this.state.date}\n                onChange={e => this.setState({ date: e.target.value })}\n              />\n            </div>\n            <div className=\"App-div\">\n              <input\n                className = \"App-input\"\n                type=\"time\"\n                value={this.state.time}\n                onChange={e => this.setState({ time: e.target.value })}\n              />\n            </div>\n          </div>\n          <div className=\"App-div\">\n            <button className=\"App-submit-button\" type=\"submit\">Agendar</button>\n          </div>\n        </form>\n        <p>{this.state.responseToPost}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/heartbeat.f123b79b.svg\";"],"sourceRoot":""}